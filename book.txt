Putting it all together - GUI with exception handling Create an Eclipse Project called javaProgram.This lab is intended to test the following exception classes all within the same try catch finally block : NullPointerException, MalFormedURLException, IOException, Exception.Create a class called TestFourExceptionsGUI.Make the class a JFrame and implement the ActionListener interface.Add FOUR JButton 's to the JFrame (use any layout you wish to use that looks reasonable). The button texts should be set to the following: "Test IO Exception", "Test URL Exception", "Test Null Pointer Exception", "Test General Exception". Add the listeners to the buttons. Add a method to the class called testException which accepts FOUR parameters: (String string, String filename, String url, boolean generalExceptionActivated). Add a try catch finally block to the method called testException. Add the following code inside the try block of the testException method:

str.toCharArray(); //Null string potential error
new FileReader(filename); //Unknown filename potential error
new URL(url); //Badly written URL potential error
if(generalexceptionActivated) { // Potential error this.clone(); //Will be caught as a general error}

Add a four catch blocks for the above try block as follows ( e is the parameter to the catch block in each case) - use J0ptionPane class for messages:
- MalformedURLException with a Message dialog box that appears with the following message should the exception be caught: "The URL passed is not correctly formatted " + e.getMessage0
- IOException with a Message dialog box that appears with the following message should the exception be caught: "There has been an input \ output error" + e.getMessaged
- NullPointerException with a Message dialog box that appears with the following message should the exception be caught: "An null object has been passed to the method " + e.getMessaged
- Exception with the a Message dialog box that appears with the following message should the exception be caught: "An unidentified error has occurred " + e.getMessage ( )

Also add a finally block that will display in a message dialog "The finally block has been called". Additionally add a blank file called "Real.txt" to the project directory of the javaProgram Eclipse project directory (this will be the valid file that the FileReader will accept to avoid an IOException).

Now implement the actions for each of the buttons so that each button when pushed will cause the specific exceptions to be caught. This will be work as follows:
- If the "Test IO Exception" button is pushed call the testException method with the following parameters ("Hi", "Whatever.txt", ' http: // www.bce.ie', false) [This will cause an IOException as there is no file called "Whatever.txt" in the project]
- If the "Test Null Pointer Exception" button is pushed call the testException method with the following parameters (null, "Real.txt", "http://www.bce.ie", false) [This will cause a NullPointerException as the string is set to null]
- If the "Test URL Exception" button is pushed call the testException method with the following parameters ("Hi", "Real.txt", "ht//www.bceie", false) [This will cause a MalformedURLException as the URL "ht//www.bce.ie" is not a correctly formatted URL]
- If the "Test General Exception" button is pushed call the testException method with the following parameters ("Hi", "Real.txt", "http://www.bce.ie", true) [This will be caught by the general exception catch block as it is not one of the specific exception types caught]

Add Javadoc to the class and Jar and execute the program. Test the exceptions response correctly.

Required activities and marking guideline:
- Create GUI with buttons added
- Add listeners and handlers
- Write the testException method
- Implement button actions